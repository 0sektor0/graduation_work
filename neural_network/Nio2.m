function [y1] = Nio2(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Apr-2018 12:27:23.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-32;-32;-32;-32;-32;-32;-32;-32;-32;-32];
x1_step1.gain = [0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038;0.0377358490566038];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.3247142714364300709e-06;2.917900579361580715e-06;2.817257691632654895e-06;-2.3278765571725301971e-06;-2.7032340944680865216e-05;-4.5823600754211664534e-06;-0.089250690322699458013;-3.0535613716040333713e-05;1.9709456939947116351e-05;-2.3601955011229561914e-05;8.154895682697168102e-07;-5.6945273039439935585e-07;-7.4490299615199925831e-06;-3.6051040490220594698e-07;-4.9510304378096443716e-07];
IW1_1 = [-2.5403879793844453584e-06 2.5052728018632293644e-06 4.192858568773650849e-06 -5.4519266404285422615e-06 4.1376918549309312336e-06 4.5096687372735532996e-06 -3.1974305415350535756e-06 2.2528501746962186804e-06 2.9150450187583626534e-06 -8.2836056619470868894e-06;-3.1886067233872153814e-06 3.1445313726124819091e-06 5.2627303905090235445e-06 -6.8430688865165805858e-06 5.1934870482301642014e-06 5.6603795062198016962e-06 -4.0133037179744207812e-06 2.8276992618335225748e-06 3.658863221718457706e-06 -1.0397294004952803033e-05;-3.0786267559965319475e-06 3.0360716309944076123e-06 5.0812106978073501914e-06 -6.6070408808339044367e-06 5.0143556672933732707e-06 5.4651442834934638247e-06 -3.8748786815525763553e-06 2.7301675516242034127e-06 3.5326633879918030879e-06 -1.0038675291999118945e-05;2.5438436413141555397e-06 -2.508680696621139079e-06 -4.1985620687870629759e-06 5.4593428372672836177e-06 -4.1433203129624172445e-06 -4.5158031912848151053e-06 3.2017799723655956975e-06 -2.2559147027161791075e-06 -2.919010324660647683e-06 8.2948737617218575572e-06;2.9540243848465730391e-05 -2.9131915626181017988e-05 -4.8755570789536150028e-05 6.3396318260115866895e-05 -4.8114079804136193424e-05 -5.2439516545853362981e-05 3.7180494528519154624e-05 -2.6196685701206506587e-05 -3.3896848840414504629e-05 9.6323765803877443772e-05;5.0074852530814020836e-06 -4.9382679766790753048e-06 -8.2647523235500327057e-06 1.0746564100118619715e-05 -8.1560104690878475816e-06 -8.8892326253419213968e-06 6.3026145707313025531e-06 -4.44070516950184342e-06 -5.7459904079462706435e-06 1.632822763557412082e-05;0.064011986615308852366 -0.053814161790426758014 -0.10964013296724395286 0.14895335111714100296 -0.11728672736714633451 -0.12834963097728285808 0.098285047836510958108 -0.064221685605580447476 -0.10859502120771032108 0.23498285566330212593;3.3368529217112647268e-05 -3.2907283367776890494e-05 -5.5074077920968981614e-05 7.1612201793567320908e-05 -5.4349452695568576288e-05 -5.9235446946599126967e-05 4.1998922961681542289e-05 -2.9591660819578993828e-05 -3.8289731505471104236e-05 0.00010880690160580645397;-2.1537986650679554141e-05 2.1240272035222249633e-05 3.5548008057980585365e-05 -4.6222673457898896137e-05 3.5080292411527164403e-05 3.8233996919591858898e-05 -2.7108543283739592044e-05 1.9100176051050494331e-05 2.4714415064322539639e-05 -7.0230292183415615422e-05;2.5791607791521190907e-05 -2.5435096288381401876e-05 -4.2568523145844105115e-05 5.5351369981090881803e-05 -4.2008436627414706471e-05 -4.5784978544944565052e-05 3.2462315608829715263e-05 -2.2872344556133452378e-05 -2.959536182401563455e-05 8.4100347305429882876e-05;-8.9114602953427559092e-07 8.7882793014290996674e-07 1.4708183541213500122e-06 -1.9124884937159888844e-06 1.4514663506829809901e-06 1.5819526088119449103e-06 -1.1216308519244151069e-06 7.9028026646910936397e-07 1.0225724648258556631e-06 -2.9058168903947684443e-06;6.2228330087297030452e-07 -6.1368162708596209079e-07 -1.0270659015773738194e-06 1.3354821915721830892e-06 -1.0135524836027262261e-06 -1.1046704561495989004e-06 7.8322982480287474047e-07 -5.5184918785658977898e-07 -7.1405779424628718533e-07 2.0291189837144423447e-06;8.1401083526109648794e-06 -8.0275895679500863344e-06 -1.3435082891043807063e-05 1.7469486543265066449e-05 -1.325831343746467392e-05 -1.4450230635497579769e-05 1.0245455151706799905e-05 -7.2187574112288632343e-06 -9.3406135592603547801e-06 2.6542972282240339516e-05;3.9395650039803954695e-07 -3.8851093357903757164e-07 -6.5021717228659504708e-07 8.4547004520685589219e-07 -6.4166206746565876846e-07 -6.9934723680809828829e-07 4.9584888479615576575e-07 -3.4936591497549672898e-07 -4.5205730134067272324e-07 1.2845991730123199019e-06;5.4103587513073572183e-07 -5.3355726514412069684e-07 -8.9296868179076493367e-07 1.1611170912544157091e-06 -8.812196216708302424e-07 -9.6044092159482957077e-07 6.8096867312092294593e-07 -4.7979787964570409858e-07 -6.2082797831984779874e-07 1.7641903029927884252e-06];

% Layer 2
b2 = 0.16375646078262262595;
LW2_1 = [3.395692467856895207e-06 7.0392015411937933688e-06 -2.7348068150314448939e-05 -1.7401117798380409815e-05 -0.00017653276254801157467 -2.2867267497850760468e-05 -0.3961252969202737062 -0.00019077186824729009795 0.00012019809914146255335 -0.00013911658084393745604 2.2934697296396358394e-05 1.2248555488640886543e-05 -4.1492115440373503058e-05 9.5359350867390693321e-06 -1.3041493737772457659e-05];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0377358490566038;
y1_step1.xoffset = -32;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
