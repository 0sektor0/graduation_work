function [y1] = Nio(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Apr-2018 23:10:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [511.3;511.3;511.3;510.9;510.9;510.9;510.9;510.9;510.9;510.9];
x1_step1.gain = [0.00522602560752548;0.00522602560752548;0.00522602560752548;0.00522056904202558;0.00522056904202558;0.00522056904202558;0.00522056904202558;0.00522056904202558;0.00522056904202558;0.00522056904202558];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.0016774260782895830234;0.0062993622282607759227;0.01073807263104759914;0.0011688417603473715434;0.00071459464749120229273;-0.0078129527805379656025;0.00088713947059878422996;0.022762455556397616363;0.023142932519803174202;-0.01083161558482105026];
IW1_1 = [-0.012162440949255991576 -0.10858963175261705791 -0.0076991685328705178337 -0.0029391562019131442507 0.00091908760841393388925 0.0044916719716109878777 0.0072545613733769939019 0.0092938024626071161216 0.012472281719259748975 0.0133779211177160514;0.0062122634409196011637 0.0758656927301582934 0.0033353588987262293604 0.0015954809020295853891 0.00071286994674844090993 -0.00026683972720370089998 -0.00085042335920354418695 -0.0011700419386853307731 -0.0010739847400913730014 -0.00097538689376492542036;-0.039335294137893411781 0.031937963689381211607 -0.022981383650087994913 -0.009342177997065928205 0.0016146195566019128607 0.011769908503009593112 0.018932527541666011733 0.024726909472209332441 0.031655961622200447236 0.035111866070424137265;0.014325846524694020589 0.1291979080858157436 0.0074555822191572900665 0.0019669671204022493895 -0.003121218813224785945 -0.0077332485623545403966 -0.011038912621460479982 -0.014019975848616150066 -0.017367532083001419735 -0.019226327249439123523;-0.013685694660982463192 -0.10136944085326217435 -0.0086939289754703035634 -0.0035896546727929479377 0.00038714804911906675186 0.0040132178202441802159 0.00673291363631009325 0.0086722073771278770232 0.011675222405472668319 0.012530716882166052784;-0.010854422494843475946 -0.077992450741773924894 -0.0054955413253428772591 -0.0026549490830864107792 -0.00050385421387369347217 0.0013960809841163746101 0.0024893103541937114734 0.0033361718319422730729 0.0032161890717637134016 0.0036818914187918953297;0.015575238551148250232 0.12986739085943949101 0.0084286532072680390298 0.0025680741030134524201 -0.0028745098915683442442 -0.0077281765449562318457 -0.011199260319348917914 -0.014299058049385051511 -0.017855393672995344134 -0.01979322744568146053;0.0060637478837669584603 0.0020401189310667580332 0.0034918153594586027501 0.0043402922906742155348 0.00635287856061844073 0.0078842714583219584978 0.0095104343227959461243 0.011404019433896765354 0.015731309099585880085 0.017080875599793477609;0.046488752744549416418 -0.095835116832201736048 0.02417085254110932363 0.011367836281818772398 0.0020539623957900950309 -0.0068404049823722491014 -0.012507557404472688725 -0.016462605602882891126 -0.017373528695203296901 -0.018859846869591363749;-0.0082392144228433834841 -0.068290858980403823519 -0.0035992101607677574361 -0.0019311290713320552418 -0.00090972360794884629849 3.0637542219178402184e-05 0.00032192789838932745839 0.00054872069864406701478 -0.00072353915695544444939 -0.00062976906395452360993];

% Layer 2
b2 = -0.037425479238321034126;
LW2_1 = [-1.2134242779521120514 1.1932502827431294978 1.1787171185780283 1.2395189013684142498 -1.2035846193318953112 -1.1937839901411129162 1.237892734584004284 1.1088830551882578046 -1.2807284685681901149 -1.1886770954000782652];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00522602560752548;
y1_step1.xoffset = 511.3;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
