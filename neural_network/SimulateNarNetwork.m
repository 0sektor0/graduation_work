function [Y,Xf,Af] = SimulateNarNetwork(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 16-Apr-2018 12:22:32.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x3 cell 1, initial 3 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 3 layer delay states.
%   Each Ai{1,ts} = 5xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x3 cell 1, final 3 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 5xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 510.9;
x1_step1.gain = 0.00522056904202558;
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.0880933787601072549;-0.16585901730975791124;-0.33493907328202182638;0.34361104104319728503;0.15885456201104020124];
IW1_1 = [1.0648418296606185773 0.3896828020227445788 -0.21337110506808584787;-0.30386170045179305976 0.091017307782548156903 0.34649864807385888366;0.52784208972129176285 0.12262311466641173663 -1.0862370856582233003;1.4244959153549501263 0.11876092395664883394 -1.1764206900583971116;0.28964883454373296923 -0.08533121122652824464 -0.32835395442936538002];

% Layer 2
b2 = -0.38810199909986653477;
LW2_1 = [0.23551224856469576974 0.45149284319022320311 -0.99874948779641781194 1.1940184786101575298 -0.43361238355445841375];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00522056904202558;
y1_step1.xoffset = 510.9;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,4);
for ts=1:3
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+2,4)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3]-1,4)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 3);
xits = finalxts(finalxts<=3);
xts = finalxts(finalxts>3)-3;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
