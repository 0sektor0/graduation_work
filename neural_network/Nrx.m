function [y1,xf1,xf2] = Nrx(x1,x2,xi1,xi2)
%NRX neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Apr-2018 00:50:26.
% 
% [y1,xf1,xf2] = Nrx(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 530.2;
x1_step1.gain = 0.00549752611324904;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 530.2;
x2_step1.gain = 0.00549752611324904;
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.00073574782037392648035;0.024918963098582359861;-0.0060325844520101902513;-0.015591615902915093028;-0.0088342206422078375233;0.0030521045033891692523;-0.007069971519319525298;0.01933405915371175926;-0.0045203281198230305105;-0.0035417936695072808895];
IW1_1 = [0.0047638972343616295055 0.053393190474190117822;-0.025036814526775141854 -0.0018190376088502296925;0.037219797479838646892 0.022944910355358963394;0.0066809820510037995142 -0.030148284645285097078;0.0024769202056369342066 -0.037616551197327423306;-0.053118556562673467647 -0.04745736505436486119;0.030802428590969495314 0.012638894680883487956;-0.014036403017164826232 0.016654632142424755092;-0.01256605819969118347 0.018917929510720681019;0.057529183301553210583 0.054317879120709004759];
IW1_2 = [-0.31050901498876226636 0.0047638992760426447301;-0.19877489035884013391 -0.025036816623329363751;0.15437838475472606681 0.037219800077697914875;0.26509489842140454563 0.0066809853209795150644;0.28024135898058633032 0.0024769200761982461401;-0.1007297106414782456 -0.053118559099853260297;0.17637230937146919363 0.030802430031878814259;-0.23791862139194561165 -0.014036400341169982114;-0.24216593661222587941 -0.012566058792620109913;0.083043480612322459478 0.057529186379217861491];

% Layer 2
b2 = 0.035530857706929160067;
LW2_1 = [-0.55716498034435968378 -0.42190397509631577533 0.32135830748676696977 0.51579768195935415953 0.52936733745890607317 -0.22494711386258511854 0.36173957225202396648 -0.46920703589220441598 -0.42689115718772818742 0.21652181186906879762];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00549752611324904;
y1_step1.xoffset = 530.2;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
