function [y1,xf1,xf2] = SimulateNarx(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Mar-2018 02:03:52.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 1x5 matrix, initial 5 delay states for input #1.
%   xi2 = 1x5 matrix, initial 5 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x5 matrix, final 5 delay states for input #1.
%   xf2 = 1x5 matrix, final 5 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 1;
x1_step1.gain = 0.002002002002002;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 2;
x2_step1.gain = 0.002002002002002;
x2_step1.ymin = -1;

% Layer 1
b1 = [-1.7090172203160829412;-1.434661824735476765;-1.0248798375554910578;0.15187863316150465587;-0.11704147597611042064;-0.058363867728379856259;-0.54156627864489514934;-1.0316357902912727251;-1.2617032608578859776;-1.8689621535231204508];
IW1_1 = [0.15953178999074935085 -0.62226452507399598879 0.060830731347264417608 -0.77558313935781708626 -0.8511310528827321642;1.0665109884445469479 -0.081450026684921489339 0.27459298178719604433 -0.35222423784098749744 -1.0097215316539378538;0.48709849061539817194 0.27820680189382912539 0.58772234409607582162 0.656870082645066522 0.14048086017385971735;-0.46488478584157094664 0.089763777097414815254 -0.5763531722551937797 0.39344424906312008838 -0.27872934599624055174;-0.2652232776466298958 -0.68559072010026433919 -0.022421095150856204525 -0.49760954913419497281 0.36874192995875959555;0.40742763723298835998 0.4763043935449916555 -0.3629398805735296607 -1.0732853474200998445 0.29454685909198069504;-0.64433502300773415339 -0.9052049017899926886 -0.94167174055582059111 -0.50845089441451396528 -0.20712011737187976945;-0.2962715390588603892 -0.74263365445905271667 0.40514869461448499433 0.4717451173631014294 -0.50966222731695620674;-0.51631884461305388445 0.7694005170538716909 0.58626058298144778647 -0.097486366025991755269 0.096143620520296763088;-0.67110069290497231798 0.46318581921767770782 0.5152867967407451788 0.90375770290899815063 0.64160533728983637491];
IW1_2 = [0.61487828302025848703 -0.70794674024522541433 -0.44789323152365934089 0.25969355851680625547 0.24085764928703573551;-0.24702381325767933107 -0.26576124870071260453 0.58310493885226288846 -0.37176500274580615013 -0.30066683680964495506;-0.22656814745680620149 0.27659540722185044226 0.80571687939104064125 -0.84451376141083323024 -0.20773793129614079311;0.84498868752507905189 -0.4437390559545442148 -0.56943084565509938244 0.76222722429431777336 -0.37701152227248752036;0.606138725313992488 0.59142650823268105853 -0.79282392827066772156 0.71190089804275324958 -0.60236911339393817144;0.33934073764760885883 -0.19666201233376645607 0.20399427948173928793 0.84854120256203158235 0.036192038533045714499;-0.59932709214792923014 0.064315096078469677354 0.12319735013463742335 -0.59545680144108992238 -0.18053667735575659736;-0.84744939854136402957 -0.82408525969485146856 -0.52232718653572296486 -0.26706284679096115031 -0.39380553917637639572;-0.77038388509369848389 -0.67226618897118661788 0.81173112134442448884 0.45821689805859794342 -0.050168609551875638364;-0.24029552282126775964 -0.62304276505939881758 0.091271865071466312669 -0.62730015198289845735 -0.0042620415811663436151];

% Layer 2
b2 = 0.6978369957554244607;
LW2_1 = [-0.0011230187451937237181 -0.94577252909427667049 -0.00050514245379962004288 -0.4778234232333447018 -0.81217673682454893935 -0.090880500192812768701 3.9656810838924306143e-06 1.8644970577760549711e-05 0.94660653772540304107 0.79011075296776689392];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.002002002002002;
y1_step1.xoffset = 2;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+4,6)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5]-1,6)+1),5,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2 3 4 5]-1,6)+1),5,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 5);
xits = finalxts(finalxts<=5);
xts = finalxts(finalxts>5)-5;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
