correct_ts = [-0.9, -0.8, -0.7, -0.9, -1.5, -0.9, -0.1, 0.5, 0.7, 0.3, 0.2, -0.9, -0.8, -0.7, -0.9, -1.5, -0.9, -0.1, 0.5, 0.7, 0.3, 0.2] ;
ct_size = length(correct_ts); 

cases = [ ...
    %1. одна точка за пределами карты
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [1, 2, 10, 0, 0], ...
           'size', 5, ...
           'result', true, ...
           'position', 3, ...
           'criterian', struct('type',1,'ts',[])), ...
    %2. 10 вершин по одну сторону от CL
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', zeros(1,10)+1, ...
           'size', 10, ...
           'result', true, ...
           'position', 1, ...
           'criterian', struct('type',2,'ts',[])), ...
    %3. 6 поднимающихся точек
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [0, 1, -2.9, -2.8, -2, -1, 0, 1, 2], ...
           'size', 9, ...
           'result', true, ...
           'position', 3, ...
           'criterian', struct('type',3,'ts',[])), ...
    %4. 14 попеременно возрастающих и убывающих точек
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], ...
           'size', 19, ...
           'result', true, ...
           'position', 2, ...
           'criterian', struct('type',4,'ts',[])), ...
    %5. 2 из 3 последовательных точек в зоне А или вне ее
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [0, 0.5, 2.5, 2.6], ...
           'size', 4, ...
           'result', true, ...
           'position', 2, ...
           'criterian', struct('type',5,'ts',[])), ...
    %6. 4 из 5 последовательных точек в зоне В или вне ее
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [1.5, 0, 1.5, 1.6, 1.7], ...
           'size', 5, ...
           'result', true, ...
           'position', 1, ...
           'criterian', struct('type',6,'ts',[])), ...
    %7. 15 последовательных точек в зоеах С
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [-0.9, -0.8, -0.7, 0.7, 0.6, 0.5, -0.9, -0.9, -0.8, -0.7, 0.7, 0.6, 0.5, -0.9, 0.7, 0.6, 0.5, -0.9], ...
           'size', 18, ...
           'result', true, ...
           'position', 1, ...
           'criterian', struct('type',7,'ts',[])), ...
    %8. 8 последовательных точек не в зоне С
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [-2.9, -2.8, -2.7, 2.7, 2.6, 2.5, -2.9, -2.9, -2.8, -2.7], ...
           'size', 10, ...
           'result', true, ...
           'position', 1, ...
           'criterian', struct('type',8,'ts',[])), ...
    %9. все ок
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [0, 0, 1], ...
           'size', 3, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',5,'ts',[])), ...
    %10. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', [-2.9, -2.8, -2, -1, 0, 1], ...
           'size', 6, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',3,'ts',[])), ...
    %11. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',1,'ts',[])), ...
    %12. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',2,'ts',[])), ...
    %13. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',3,'ts',[])), ...
    %14. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',4,'ts',[])), ...
    %15. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',5,'ts',[])), ...
    %16. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',6,'ts',[])), ...
    %17. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',7,'ts',[])), ...
    %18. все хорошо
    struct('ucl', 3, 'lcl',-3, 'cl', 0, 'la', -2, 'lb', -1, 'lc', 0, 'ua', 3, 'ub', 2, 'uc', 1, ...
           'ts', correct_ts, ...
           'size', ct_size, ...
           'result', false, ...
           'position', -1, ...
           'criterian', struct('type',8,'ts',[])), ...
];
    
cases_num = length(cases);
for i = 1 : cases_num
    ccase = cases(i);
    [result, position] = CheckMap(ccase.criterian, ccase);
    
    if ccase.result == result && ccase.position == position
        disp("[OK] case: " + i) 
    else
        disp("[FAIL] case: " + i + ...
            " expected: " + ccase.result + " " + ccase.position + ...
            " get: " + result + " " + position)
        break;
    end
end


